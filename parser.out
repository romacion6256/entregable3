Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> statement token
Rule 2     statement -> token
Rule 3     token -> WORD
Rule 4     token -> NUMBER
Rule 5     token -> GT
Rule 6     token -> LT
Rule 7     token -> EQ
Rule 8     token -> STRING
Rule 9     token -> LPAREN
Rule 10    token -> RPAREN
Rule 11    token -> COMMA
Rule 12    token -> ASTERISK
Rule 13    token -> DOT

Terminals, with rules where they appear

ASTERISK             : 12
COMMA                : 11
DOT                  : 13
EQ                   : 7
GT                   : 5
LPAREN               : 9
LT                   : 6
NUMBER               : 4
RPAREN               : 10
STRING               : 8
WORD                 : 3
error                : 

Nonterminals, with rules where they appear

statement            : 1 0
token                : 1 2

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . statement token
    (2) statement -> . token
    (3) token -> . WORD
    (4) token -> . NUMBER
    (5) token -> . GT
    (6) token -> . LT
    (7) token -> . EQ
    (8) token -> . STRING
    (9) token -> . LPAREN
    (10) token -> . RPAREN
    (11) token -> . COMMA
    (12) token -> . ASTERISK
    (13) token -> . DOT

    WORD            shift and go to state 3
    NUMBER          shift and go to state 4
    GT              shift and go to state 5
    LT              shift and go to state 6
    EQ              shift and go to state 7
    STRING          shift and go to state 8
    LPAREN          shift and go to state 9
    RPAREN          shift and go to state 10
    COMMA           shift and go to state 11
    ASTERISK        shift and go to state 12
    DOT             shift and go to state 13

    statement                      shift and go to state 1
    token                          shift and go to state 2

state 1

    (0) S' -> statement .
    (1) statement -> statement . token
    (3) token -> . WORD
    (4) token -> . NUMBER
    (5) token -> . GT
    (6) token -> . LT
    (7) token -> . EQ
    (8) token -> . STRING
    (9) token -> . LPAREN
    (10) token -> . RPAREN
    (11) token -> . COMMA
    (12) token -> . ASTERISK
    (13) token -> . DOT

    WORD            shift and go to state 3
    NUMBER          shift and go to state 4
    GT              shift and go to state 5
    LT              shift and go to state 6
    EQ              shift and go to state 7
    STRING          shift and go to state 8
    LPAREN          shift and go to state 9
    RPAREN          shift and go to state 10
    COMMA           shift and go to state 11
    ASTERISK        shift and go to state 12
    DOT             shift and go to state 13

    token                          shift and go to state 14

state 2

    (2) statement -> token .

    WORD            reduce using rule 2 (statement -> token .)
    NUMBER          reduce using rule 2 (statement -> token .)
    GT              reduce using rule 2 (statement -> token .)
    LT              reduce using rule 2 (statement -> token .)
    EQ              reduce using rule 2 (statement -> token .)
    STRING          reduce using rule 2 (statement -> token .)
    LPAREN          reduce using rule 2 (statement -> token .)
    RPAREN          reduce using rule 2 (statement -> token .)
    COMMA           reduce using rule 2 (statement -> token .)
    ASTERISK        reduce using rule 2 (statement -> token .)
    DOT             reduce using rule 2 (statement -> token .)
    $end            reduce using rule 2 (statement -> token .)


state 3

    (3) token -> WORD .

    WORD            reduce using rule 3 (token -> WORD .)
    NUMBER          reduce using rule 3 (token -> WORD .)
    GT              reduce using rule 3 (token -> WORD .)
    LT              reduce using rule 3 (token -> WORD .)
    EQ              reduce using rule 3 (token -> WORD .)
    STRING          reduce using rule 3 (token -> WORD .)
    LPAREN          reduce using rule 3 (token -> WORD .)
    RPAREN          reduce using rule 3 (token -> WORD .)
    COMMA           reduce using rule 3 (token -> WORD .)
    ASTERISK        reduce using rule 3 (token -> WORD .)
    DOT             reduce using rule 3 (token -> WORD .)
    $end            reduce using rule 3 (token -> WORD .)


state 4

    (4) token -> NUMBER .

    WORD            reduce using rule 4 (token -> NUMBER .)
    NUMBER          reduce using rule 4 (token -> NUMBER .)
    GT              reduce using rule 4 (token -> NUMBER .)
    LT              reduce using rule 4 (token -> NUMBER .)
    EQ              reduce using rule 4 (token -> NUMBER .)
    STRING          reduce using rule 4 (token -> NUMBER .)
    LPAREN          reduce using rule 4 (token -> NUMBER .)
    RPAREN          reduce using rule 4 (token -> NUMBER .)
    COMMA           reduce using rule 4 (token -> NUMBER .)
    ASTERISK        reduce using rule 4 (token -> NUMBER .)
    DOT             reduce using rule 4 (token -> NUMBER .)
    $end            reduce using rule 4 (token -> NUMBER .)


state 5

    (5) token -> GT .

    WORD            reduce using rule 5 (token -> GT .)
    NUMBER          reduce using rule 5 (token -> GT .)
    GT              reduce using rule 5 (token -> GT .)
    LT              reduce using rule 5 (token -> GT .)
    EQ              reduce using rule 5 (token -> GT .)
    STRING          reduce using rule 5 (token -> GT .)
    LPAREN          reduce using rule 5 (token -> GT .)
    RPAREN          reduce using rule 5 (token -> GT .)
    COMMA           reduce using rule 5 (token -> GT .)
    ASTERISK        reduce using rule 5 (token -> GT .)
    DOT             reduce using rule 5 (token -> GT .)
    $end            reduce using rule 5 (token -> GT .)


state 6

    (6) token -> LT .

    WORD            reduce using rule 6 (token -> LT .)
    NUMBER          reduce using rule 6 (token -> LT .)
    GT              reduce using rule 6 (token -> LT .)
    LT              reduce using rule 6 (token -> LT .)
    EQ              reduce using rule 6 (token -> LT .)
    STRING          reduce using rule 6 (token -> LT .)
    LPAREN          reduce using rule 6 (token -> LT .)
    RPAREN          reduce using rule 6 (token -> LT .)
    COMMA           reduce using rule 6 (token -> LT .)
    ASTERISK        reduce using rule 6 (token -> LT .)
    DOT             reduce using rule 6 (token -> LT .)
    $end            reduce using rule 6 (token -> LT .)


state 7

    (7) token -> EQ .

    WORD            reduce using rule 7 (token -> EQ .)
    NUMBER          reduce using rule 7 (token -> EQ .)
    GT              reduce using rule 7 (token -> EQ .)
    LT              reduce using rule 7 (token -> EQ .)
    EQ              reduce using rule 7 (token -> EQ .)
    STRING          reduce using rule 7 (token -> EQ .)
    LPAREN          reduce using rule 7 (token -> EQ .)
    RPAREN          reduce using rule 7 (token -> EQ .)
    COMMA           reduce using rule 7 (token -> EQ .)
    ASTERISK        reduce using rule 7 (token -> EQ .)
    DOT             reduce using rule 7 (token -> EQ .)
    $end            reduce using rule 7 (token -> EQ .)


state 8

    (8) token -> STRING .

    WORD            reduce using rule 8 (token -> STRING .)
    NUMBER          reduce using rule 8 (token -> STRING .)
    GT              reduce using rule 8 (token -> STRING .)
    LT              reduce using rule 8 (token -> STRING .)
    EQ              reduce using rule 8 (token -> STRING .)
    STRING          reduce using rule 8 (token -> STRING .)
    LPAREN          reduce using rule 8 (token -> STRING .)
    RPAREN          reduce using rule 8 (token -> STRING .)
    COMMA           reduce using rule 8 (token -> STRING .)
    ASTERISK        reduce using rule 8 (token -> STRING .)
    DOT             reduce using rule 8 (token -> STRING .)
    $end            reduce using rule 8 (token -> STRING .)


state 9

    (9) token -> LPAREN .

    WORD            reduce using rule 9 (token -> LPAREN .)
    NUMBER          reduce using rule 9 (token -> LPAREN .)
    GT              reduce using rule 9 (token -> LPAREN .)
    LT              reduce using rule 9 (token -> LPAREN .)
    EQ              reduce using rule 9 (token -> LPAREN .)
    STRING          reduce using rule 9 (token -> LPAREN .)
    LPAREN          reduce using rule 9 (token -> LPAREN .)
    RPAREN          reduce using rule 9 (token -> LPAREN .)
    COMMA           reduce using rule 9 (token -> LPAREN .)
    ASTERISK        reduce using rule 9 (token -> LPAREN .)
    DOT             reduce using rule 9 (token -> LPAREN .)
    $end            reduce using rule 9 (token -> LPAREN .)


state 10

    (10) token -> RPAREN .

    WORD            reduce using rule 10 (token -> RPAREN .)
    NUMBER          reduce using rule 10 (token -> RPAREN .)
    GT              reduce using rule 10 (token -> RPAREN .)
    LT              reduce using rule 10 (token -> RPAREN .)
    EQ              reduce using rule 10 (token -> RPAREN .)
    STRING          reduce using rule 10 (token -> RPAREN .)
    LPAREN          reduce using rule 10 (token -> RPAREN .)
    RPAREN          reduce using rule 10 (token -> RPAREN .)
    COMMA           reduce using rule 10 (token -> RPAREN .)
    ASTERISK        reduce using rule 10 (token -> RPAREN .)
    DOT             reduce using rule 10 (token -> RPAREN .)
    $end            reduce using rule 10 (token -> RPAREN .)


state 11

    (11) token -> COMMA .

    WORD            reduce using rule 11 (token -> COMMA .)
    NUMBER          reduce using rule 11 (token -> COMMA .)
    GT              reduce using rule 11 (token -> COMMA .)
    LT              reduce using rule 11 (token -> COMMA .)
    EQ              reduce using rule 11 (token -> COMMA .)
    STRING          reduce using rule 11 (token -> COMMA .)
    LPAREN          reduce using rule 11 (token -> COMMA .)
    RPAREN          reduce using rule 11 (token -> COMMA .)
    COMMA           reduce using rule 11 (token -> COMMA .)
    ASTERISK        reduce using rule 11 (token -> COMMA .)
    DOT             reduce using rule 11 (token -> COMMA .)
    $end            reduce using rule 11 (token -> COMMA .)


state 12

    (12) token -> ASTERISK .

    WORD            reduce using rule 12 (token -> ASTERISK .)
    NUMBER          reduce using rule 12 (token -> ASTERISK .)
    GT              reduce using rule 12 (token -> ASTERISK .)
    LT              reduce using rule 12 (token -> ASTERISK .)
    EQ              reduce using rule 12 (token -> ASTERISK .)
    STRING          reduce using rule 12 (token -> ASTERISK .)
    LPAREN          reduce using rule 12 (token -> ASTERISK .)
    RPAREN          reduce using rule 12 (token -> ASTERISK .)
    COMMA           reduce using rule 12 (token -> ASTERISK .)
    ASTERISK        reduce using rule 12 (token -> ASTERISK .)
    DOT             reduce using rule 12 (token -> ASTERISK .)
    $end            reduce using rule 12 (token -> ASTERISK .)


state 13

    (13) token -> DOT .

    WORD            reduce using rule 13 (token -> DOT .)
    NUMBER          reduce using rule 13 (token -> DOT .)
    GT              reduce using rule 13 (token -> DOT .)
    LT              reduce using rule 13 (token -> DOT .)
    EQ              reduce using rule 13 (token -> DOT .)
    STRING          reduce using rule 13 (token -> DOT .)
    LPAREN          reduce using rule 13 (token -> DOT .)
    RPAREN          reduce using rule 13 (token -> DOT .)
    COMMA           reduce using rule 13 (token -> DOT .)
    ASTERISK        reduce using rule 13 (token -> DOT .)
    DOT             reduce using rule 13 (token -> DOT .)
    $end            reduce using rule 13 (token -> DOT .)


state 14

    (1) statement -> statement token .

    WORD            reduce using rule 1 (statement -> statement token .)
    NUMBER          reduce using rule 1 (statement -> statement token .)
    GT              reduce using rule 1 (statement -> statement token .)
    LT              reduce using rule 1 (statement -> statement token .)
    EQ              reduce using rule 1 (statement -> statement token .)
    STRING          reduce using rule 1 (statement -> statement token .)
    LPAREN          reduce using rule 1 (statement -> statement token .)
    RPAREN          reduce using rule 1 (statement -> statement token .)
    COMMA           reduce using rule 1 (statement -> statement token .)
    ASTERISK        reduce using rule 1 (statement -> statement token .)
    DOT             reduce using rule 1 (statement -> statement token .)
    $end            reduce using rule 1 (statement -> statement token .)

